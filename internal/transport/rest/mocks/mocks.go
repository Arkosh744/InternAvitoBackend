// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks_handler is a generated GoMock package.
package mocks_handler

import (
	context "context"
	reflect "reflect"

	domain "github.com/Arkosh744/InternAvitoBackend/internal/domain"
	wallet "github.com/Arkosh744/InternAvitoBackend/internal/domain/wallet"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// BuyServiceUser mocks base method.
func (m *MockUsers) BuyServiceUser(ctx context.Context, input wallet.InputBuyServiceUser) (wallet.OutPendingOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyServiceUser", ctx, input)
	ret0, _ := ret[0].(wallet.OutPendingOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyServiceUser indicates an expected call of BuyServiceUser.
func (mr *MockUsersMockRecorder) BuyServiceUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyServiceUser", reflect.TypeOf((*MockUsers)(nil).BuyServiceUser), ctx, input)
}

// CheckAndDoTransfer mocks base method.
func (m *MockUsers) CheckAndDoTransfer(ctx context.Context, input wallet.InputTransferUsers) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndDoTransfer", ctx, input)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndDoTransfer indicates an expected call of CheckAndDoTransfer.
func (mr *MockUsersMockRecorder) CheckAndDoTransfer(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndDoTransfer", reflect.TypeOf((*MockUsers)(nil).CheckAndDoTransfer), ctx, input)
}

// CheckUserByEmail mocks base method.
func (m *MockUsers) CheckUserByEmail(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserByEmail indicates an expected call of CheckUserByEmail.
func (mr *MockUsersMockRecorder) CheckUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserByEmail", reflect.TypeOf((*MockUsers)(nil).CheckUserByEmail), ctx, email)
}

// CheckWalletByEmail mocks base method.
func (m *MockUsers) CheckWalletByEmail(ctx context.Context, user string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWalletByEmail", ctx, user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWalletByEmail indicates an expected call of CheckWalletByEmail.
func (mr *MockUsersMockRecorder) CheckWalletByEmail(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWalletByEmail", reflect.TypeOf((*MockUsers)(nil).CheckWalletByEmail), ctx, user)
}

// CheckWalletByUserID mocks base method.
func (m *MockUsers) CheckWalletByUserID(ctx context.Context, uuid uuid.UUID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWalletByUserID", ctx, uuid)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWalletByUserID indicates an expected call of CheckWalletByUserID.
func (mr *MockUsersMockRecorder) CheckWalletByUserID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWalletByUserID", reflect.TypeOf((*MockUsers)(nil).CheckWalletByUserID), ctx, uuid)
}

// Create mocks base method.
func (m *MockUsers) Create(ctx context.Context, user domain.InputUser) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsersMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsers)(nil).Create), ctx, user)
}

// CreateWallet mocks base method.
func (m *MockUsers) CreateWallet(ctx context.Context, input wallet.InputDeposit) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, input)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockUsersMockRecorder) CreateWallet(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockUsers)(nil).CreateWallet), ctx, input)
}

// DepositWallet mocks base method.
func (m *MockUsers) DepositWallet(ctx context.Context, input wallet.InputDeposit) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositWallet", ctx, input)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DepositWallet indicates an expected call of DepositWallet.
func (mr *MockUsersMockRecorder) DepositWallet(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositWallet", reflect.TypeOf((*MockUsers)(nil).DepositWallet), ctx, input)
}

// GetUserBalance mocks base method.
func (m *MockUsers) GetUserBalance(ctx context.Context, user domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockUsersMockRecorder) GetUserBalance(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockUsers)(nil).GetUserBalance), ctx, user)
}

// ManageOrder mocks base method.
func (m *MockUsers) ManageOrder(ctx context.Context, input wallet.InputOrderManager) (wallet.OutOrderManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageOrder", ctx, input)
	ret0, _ := ret[0].(wallet.OutOrderManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManageOrder indicates an expected call of ManageOrder.
func (mr *MockUsersMockRecorder) ManageOrder(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageOrder", reflect.TypeOf((*MockUsers)(nil).ManageOrder), ctx, input)
}

// ReportForUser mocks base method.
func (m *MockUsers) ReportForUser(ctx context.Context, input domain.InputReportUserTnx) ([]domain.OutputReportUserTnx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportForUser", ctx, input)
	ret0, _ := ret[0].([]domain.OutputReportUserTnx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportForUser indicates an expected call of ReportForUser.
func (mr *MockUsersMockRecorder) ReportForUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportForUser", reflect.TypeOf((*MockUsers)(nil).ReportForUser), ctx, input)
}

// ReportMonth mocks base method.
func (m *MockUsers) ReportMonth(ctx context.Context, input wallet.InputReportMonth) ([]wallet.ReportMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportMonth", ctx, input)
	ret0, _ := ret[0].([]wallet.ReportMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportMonth indicates an expected call of ReportMonth.
func (mr *MockUsersMockRecorder) ReportMonth(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportMonth", reflect.TypeOf((*MockUsers)(nil).ReportMonth), ctx, input)
}
